Multithreading
	Multithreading ဆိုတာ မ်ားၿပားစြာေသာ threads မ်ားကို တစ္ခ်ိန္တည္းမွာ executing လုပ္တဲ့ process တစ္ခုၿဖစ္တယ္
	thread ဆိုတာက ေပါ့ပါးတဲ့ sub process တစ္ခုၿဖစ္တယ္ processing တစ္ခုရဲ႕ အေသးငယ္ဆံုး unit တစ္ခုၿဖစ္တယ္
	Multiprocessing ေရာ multithreading ပါ multitasking ရရွိဖို႔အတြက္ အသံုးၿပဳၾကတယ္
	
	multithreading ကို multiprocessing ထက္ပိုသံုးၾကတယ္ ဘာလို႔လဲဆိုေတာ့ threads ေတြဟာ memory ကို share ၿပီးသံုးၾကတယ္
	memory ကို ခြဲၿပီးမသံုးတဲ့အတြက္ memory ကို save ၿဖစ္ေစတယ္
	context-switching လုပ္ဖို႔အခ်ိန္ယူတာကလည္း threads ေတြက processes ေတြထက္ ပိုနည္းတယ္
	
	Multithreading ရဲ႕ေကာင္းက်ိဳးမ်ား
		1.threads ေတြဟာ independent ၿဖစ္တယ္ ၿပီးေတာ့ multiple operation မ်ားကို တစ္ခ်ိန္တည္းမွာ ေဆာင္ရြက္ႏိုင္တယ္
		2.multiple opreation မ်ားကို တစ္ခ်ိန္တည္းမွာ ေဆာင္ရြက္ႏိုင္တဲ့အတြက္ အခ်ိန္ကုန္လည္း သက္သာေစတယ္
		3.threads မ်ားဟာ တစ္ခုနဲ႔တစ္ခု မမွီခိုတဲ့အတြက္ thread တစ္ခုမွာ exception တက္ခဲ့သည့္တိုင္ေအာင္ တစ္ၿခား threads မ်ားကို effect မၿဖစ္ေစႏိုင္ဘူး
		
	Multitasking
		multitasking ဆိုတာက မ်ားၿပားစြာေသာ task မ်ားကို တစ္ၿပိဳင္နက္တည္းမွာ ေဆာင္ရြက္ႏိုင္တဲ့ process တစ္ခုၿဖစ္တယ္
		CPU ကို multitasking လုပ္တဲ့အခါ ခြဲၿပီးသံုးတယ္
		Multitasking ကို နည္းလမ္း ၂ မ်ိဳးနဲ႔ ရယူႏိုင္တယ္
			1.Process-based Multitasking (Multiprocessing)
			2.Thread-based Multitasking (Multithreading)
			
			1.Process-based Multitasking (Multiprocessing)
				process တစ္ခုခ်င္းစီတိုင္းအတြက္ memory မွာ address တစ္ခုစီရွိတယ္
				process တစ္ခုခ်င္းစီတိုင္းဟာ ေလးတယ္
				process မ်ားၾကားမွာရွိတဲ့ communication ရဲ႕ ကုန္က်စရိတ္ဟာမ်ားတယ္
				process တစ္ခုကေန ေနာက္တစ္ခုကို change မယ္ဆိုရင္ အခ်ိန္ေတာ္ေတာ္ယူရတယ္ ဘာေတြအတြက္လဲဆိုေတာ့
					 saving and loading registers, memory maps, updating lists, etc.
					 
			2.Thread-based Multitasking (Multithreading)
				thread ကေတာ့ memory ကို share ၿပီးသံုးတယ္
				thread က ေပါ့တယ္
				thread  ေတြၾကားထဲမွာ ရွိတ့ဲ communication cost က နည္းတယ္
				
			Note:thread တစ္ခုခ်င္းစီအတြက္ အနည္းဆံုး process တစ္ခုေတာ့လိုပါတယ္
			
			Thread ဆိုတာဘာလဲ
				thread ဆိုတာက light weight ၿဖစ္တဲ့ sub process တစ္ခုၿဖစ္တယ္
				execute ရဲ႕ သီးၿခား path ေလးေတြၿဖစ္တယ္
				thread ေတြဟာ သီးၿခားရပ္တည္တယ္
				သီးၿခားရပ္တည္တဲ့အတြက္ thread တစ္ခုမွာ exception တက္လာခဲ့မယ္ဆိုရင္ေတာင္ ေနာက္thread တစ္ခုကို effect မၿဖစ္ေစႏိုင္ဘူး
				သူတို႔က memory ကို share သံုးပါတယ္
				
				ပံုထဲမွာ ၿပထားတာကေတာ့ thread ေတြ process တစ္ခုတည္းမွာ အလုပ္လုပ္ေနတဲ့ ပံုစံၿဖစ္တယ္
				threads ေတြၾကားထဲက context-switching ကိုလည္း ၿမင္ရမယ္ 
				OS ထဲမွာ multiple process ကိုလည္း ေတြ႕ရမယ္ 
				process ထဲက multiple threads မ်ားကိုလည္း ေတြ႕ၿမင္ရမယ္
				
			Java Thread class
				 java က thread class ကိုေပးတယ္ thread programming ကို ရရွိေစဖို႔ရန္အတြက္
				 thread class က constructor နဲ႔ method ေတြကိုေပးတယ္ thread တစ္ခုေပၚမွာ operation မ်ားကို ဖန္တီးဖို႔ရန္နဲ႔ လုပ္ေဆာင္ရန္ 
				 thread class ဟာ object class ကို extends လုပ္ထားတယ္ runnable interface ကို implements လုပ္ထားတယ္
******************************************************************************************************************
Life Cycle of a Thread(Thread States)
	thread တစ္ခုမွာ အဆင့္ ၅ ဆင့္ရွိတယ္
	java မွာ ရွိတဲ့ thread ေတြကို JVM က ထိန္းခ်ဳပ္ထားတယ္
	သူ႕ရဲ႕ states ေတြကေတာ့
		1.New
		2.Runnable
		3.Running
		4.Non-Runnable (Blocked)
		5.Terminated
		
		1.New
			New state ဆိုတာက thread class ကို instance ယူၿပီးတဲ့ေနာက္ start() method အလုပ္မလုပ္ခင္အခ်ိန္ကို ေၿပာတာၿဖစ္တယ္
			
		2.	Runnable
			Runnable state ဆိုတာက start() method အလုပ္လုပ္ၿပီး thread scheduler က running မလုပ္ေသးခင္အခ်ိန္ကို ေၿပာတာၿဖစ္တယ္
			
		3. Running
			Running state ဆိုတာက thread scheduler က ေရြးခ်ယ္ၿပီးတဲ့အခ်ိန္ကို ဆိုလိုတယ္
			
		4.Non-Runnable (Blocked)
			Non-Runnable (Blocked) ဆိုတာက run လို႔အဆင္မေၿပေတာ့ဘူး ဒါေပမယ့္ thread က ရွင္သန္ေနဆဲဆိုတဲ့ state ကို ဆိုလိုသည္
			
		5.Terminated
			run() method ကေန ထြက္သြားေသာအခါ thread က ရပ္တန္႔သြားေသာ state ကို ဆိုလိုသည္
******************************************************************************************************************
Thread ေတြကို ဘယ္လိုဖန္တီးမလဲ
	Thread ေတြကို ဖန္တီးဖို႔ နည္းလမ္း ၂ မ်ိဳး ရွိတယ္
		1.Thread Class ကို extend လုပ္ၿခင္းအားၿဖင့္ေသာ္လည္းေကာင္း
		2. Runnable interface ကို implement လုပ္ၿခင္းအားၿဖင့္ေသာ္လည္းေကာင္း
	ဖန္တီးႏိုင္တယ္
	
	Thread Class: ဆိုတာ ဘာလဲ
		Thread Class က thread တစ္ခုေပၚမွာ operation မ်ားကို ဖန္တီးရန္ နဲ႔ လုပ္ေဆာင္ရန္ constructors မ်ားနဲ႔ methods မ်ားကို ေပးပါတယ္
		Thread Class ဟာ Object Class ကို extend လုပ္ထားၿပီး Runnable Interface ကို implement လုပ္ထားပါတယ္
	Thread Class ရဲ႕ အသံုးမ်ားတဲ့ Constructors မ်ားကေတာ့
		1.Thread()
		2.Thread(String name)
		3.Thread(Runnable r)
		4.Thread(Runnable r,String name)
		တို႔ ၿဖစ္ၾကတယ္
	Thread Class ရဲ႕ အသံုးမ်ားတဲ့ Methods မ်ားကေတာ့
		1.public void run(): is used to perform action for a thread.
		2.public void start(): starts the execution of the thread.JVM calls the run() method on the thread.
		3.public void sleep(long miliseconds): Causes the currently executing thread to sleep (temporarily cease execution) for the specified number of milliseconds.
		4.public void join(): waits for a thread to die.
		5.public void join(long miliseconds): waits for a thread to die for the specified miliseconds.
		6.public int getPriority(): returns the priority of the thread.
		7.public int setPriority(int priority): changes the priority of the thread.
		8.public String getName(): returns the name of the thread.
		9.public void setName(String name): changes the name of the thread.
		10.public Thread currentThread(): returns the reference of currently executing thread.
		11.public int getId(): returns the id of the thread.
		12.public Thread.State getState(): returns the state of the thread.
		13.public boolean isAlive(): tests if the thread is alive.
		14.public void yield(): causes the currently executing thread object to temporarily pause and allow other threads to execute.
		15.public void suspend(): is used to suspend the thread(depricated).
		16.public void resume(): is used to resume the suspended thread(depricated).
		17.public void stop(): is used to stop the thread(depricated).
		18.public boolean isDaemon(): tests if the thread is a daemon thread.
		19.public void setDaemon(boolean b): marks the thread as daemon or user thread.
		20.public void interrupt(): interrupts the thread.
		21.public boolean isInterrupted(): tests if the thread has been interrupted.
		22.public static boolean interrupted(): tests if the current thread has been interrupted.
		
		Runnable interface
			မည္သည့္ class မဆို Runnable interface ကို implement လုပ္သင့္တယ္
			runnable interface မွာ method တစ္ခုပဲ ရွိတယ္
			
		thread တစ္ခုအစၿပဳၿခင္း
			start() ဆိုတဲ့ method ကို thread အသစ္တစ္ခု စတင္ဖို႔ သံုးပါတယ္
			သူတို႕က ေအာက္ေဖာ္ၿပပါ tasks မ်ားကို လုပ္ေဆာင္ပါတယ္
				1.new thread တစ္ခုစတင္ၿပီ
				2.thread က new state ကေန runnable state ကို ေရႊ႕ေၿပာင္းသြားတယ္
				3.thread ဟာ execute လုပ္မယ္ဆိုရင္ေတာ့ run() method ကိုေခၚၿပီး run လုိက္တယ္
*******************************************************************************************************************
Thread Scheduler				
	Thread Scheduler ဆိုတာ java ရဲ႕ အစိတ္အပိုင္းတစ္ခုၿဖစ္တယ္ 
	Thread Scheduler က ဘယ္ thread ကို run သင့္လည္းဆိုတာကို ဆံုးၿဖတ္တယ္
	Thread scheduler က ဘယ္ thread ကို runnable လုပ္မလဲဆိုတာကို အာမခံခ်က္မရွိဘူး
	Thread တစ္ခုဟာ Single process တစ္ခုမွာ တစ္ခါပဲ run ႏိုင္တယ္ တစ္ခ်ိန္တည္းမွာ
	Thread scheduler က thread ေတြကို schedule လုပ္ဖို႔ရန္ preemptive သို႔မဟုတ္ time slicing ကို အဓိကထားသံုးပါတယ္
*******************************************************************************************************************
Sleep Method 
	Thread Class ရဲ႕ Sleep Method က သတ္မွတ္ထားတဲ့အခ်ိန္တစ္ခုမွာ thread တစ္ခုကို sleep လုပ္ဖို႔ရန္ သံုးပါတယ္
	
	Syntax of sleep() method
		Method ၂ ခုရွိပါတယ္
			1.public static void sleep(long miliseconds)throws InterruptedException
			2.public static void sleep(long miliseconds, int nanos)throws InterruptedException
*******************************************************************************************************************
Thread တစ္ခုကို ၂ ခါ စလို႔ရလား
	မရပါဘူး
	Thread တစ္ခုကို စတင္ၿပီးတဲ့ေနာက္ပိုင္းမွာ အဲ့ thread ကို ေနာက္ဘယ္ေတာ့မွ စလို႔မရဘူး
	အဲ့လိုသြားစခဲ့မယ္ဆိုရင္ IllegalThreadStateException ကိုပစ္သြားလိမ့္မယ္
*******************************************************************************************************************			
Join Method
	join method က thread ေသဖို႔ေစာင့္ေနၿခင္းၿဖစ္တယ္
	လက္ရွိ run ေနတဲ့ thread complete လုပ္ေဆာင္ၿပီးတဲ့ေနာက္ ရပ္သြားခဲ့ရင္ ေနာက္ထပ္ thread က ခ်က္ခ်င္း join ၿပီးဆက္လက္လုပ္ေဆာင္တယ္လို႔ 
	နားလည္ထားတယ္
*******************************************************************************************************************	
Naming Thread and Current Thread
	Naming Thread
		thread တစ္ခုရဲ႕ name ကို ရဖို႔နဲ႔ name ကို change ဖို႔ရန္ thread class က method တစ္ခုေပးပါတယ္
		default အားၿဖင့္ဆိုရင္ thread တစ္ခုခ်င္းစီတိုင္းမွာ name ေတြရွိတယ္ ဥပမာ thread-0 and thread-1 ဆိုၿပီးေတာ့ ရွိတယ္
		အဲ့တာကို setName() ဆိုတဲ့ method ကိုသံုးၿပီးေတာ့ name ေတြကို change လို႔ရတယ္
		
		syntax
			1. public String getName(): is used to return the name of a thread.
            2. public void setName(String name): is used to change the name of a thread.	

     Current Thread
     	currently executing thread ရဲ႕ reference ကို return ၿပန္ေပးလိမ့္မယ္
*********************************************************************************************************************
Priority of a Thread (Thread Priority)
	Thread တိုင္းမွာ priority ရွိတယ္
	priorities မ်ားကို ၁ ကေန ၁၀ အတြင္းနံပါတ္မ်ားနဲ႔ ကိုယ္စားၿပဳတယ္
	 thread schedular က သူတို႕ရဲ႕ priority အတိုင္း schedule ဆြဲတယ္ အဲ့တာကို  preemptive scheduling လို႔ေခၚတယ္
	 ဒါေပမယ့္လို႔ အာမေတာ့ မခံႏိုင္ဘူး ဘာလို႔လဲဆိုေတာ့ အဲ့တာက JVM အေပၚကို မူတည္ေနလို႔
	 
	 Priority ၃ မ်ိဳး
	 	1.public static int MIN_PRIORITY
		2.public static int NORM_PRIORITY
		3.public static int MAX_PRIORITY
		
		NORM_PRIORITY(Default priority) က 5, MIN_PRIORITY က 1, MAX_PRIORITY က 10
*********************************************************************************************************************		
Demon Thread
	Demon Thread ဆိုတာ Service Provider တစ္ခုၿဖစ္တယ္
	Demon Thread က User Thread ကို service တစ္ခုေပးတယ္
	သူ႕ရဲ႕ သက္တမ္းက User Thread ေပၚမွာ မူတည္ေနတယ္
	ဥပမာ User Threads အားလံုးေသသြားခဲ့မယ္ဆိုရင္ JVM က အဲ့ Demon Thread ကိုလည္း auto terminate လုပ္သြားလိမ့္မယ္
	
	java မွာက demon thread ေတြအမ်ားၾကီး လက္ရွိ run ေနၾကတယ္
	e.g. gc, finalizer etc.	
	
	detail ၿမင္ခ်င္တယ္ဆိုရင္ေတာ့ console မွာ jconsole လို႔ရိုက္လိုက္ရင္ အဲ့ jconsole tool ကေန loaded classes တို႔ memory usage တို႔ running threads တို႔ကို
	ၿပေပးလိမ့္မယ္
	
	Point to Remember for Demon Thread
		background supporting tasks ေတြအတြက္ user threads ေတြကို Demon Thread က services မ်ားေပးေနတယ္
		သူ႕ရဲ႕ life က user threads ေပၚမွာ မူတည္ေနတယ္
		သူက priority နိမ့္တဲ့ thread တစ္ခုၿဖစ္တယ္
		
User Threads မရိွေတာ့ဘူးဆိုရင္ JVM က Demon Thread ကို ဘာလို႔ terminate လုပ္ရတာလဲ
	သူေၿပာၿပီးသားပဲ Demon Thread ဆိုတာ user thread အတြက္ပဲ အလုပ္လုပ္ေပးေနတာၿဖစ္တဲ့အတြက္
	user thread ေတြသာ မရွိေတာ့ဘူးဆိုရင္ demon thread က ဘယ္လိုမွ ရွိႏိုင္ေတာ့မွာ မဟုတ္ဘူး
	
Thread Class ရဲ႕ Demon Thread Method မ်ား
	java.lang.Thread class က java demon thread အတြက္ methods ၂ ခုေပးလိမ့္မယ္
		1.public void setDaemon(boolean status)
			current thread က user thread လား demon thread လားဆိုတာ မွတ္ဖို႔အတြက္ သံုးတဲ့ method ၿဖစ္တယ္
		2.public boolean isDaemon()
			current thread က demon thread လားဆိုတာ စစ္ေဆးဖို႔အတြက္ သံုးတဲ့ method ၿဖစ္တယ္
			
	*thread တစ္ခုကို စၿပီးမွ demon thread ထည့္လိုက္လို႔ရွိရင္ 
	 java.lang.IllegalThreadStateException
	 အဲ့လို exception တက္သြားလိမ့္မယ္
********************************************************************************************************************	 
Thread Pool
	thread pool ဟာ ကိုယ္စားၿပဳတယ္ worker threads ေတြရဲ႕ group တစ္ခုကို ကုိယ္စားၿပဳတယ္
	သူတို႔ဟာ အလုပ္လုပ္ဖို႔ရန္ ေစာင့္ေနတယ္ ၿပီးေတာ့ သူတို႔ကို ၿပန္လည္ အသံုးၿပဳၾကတယ္
	
	thread pool ၿဖစ္စဥ္တစ္ခုမွာဆိုရင္ fixed size thread ေတြရဲ႕ group တစ္ခုဟာ ဖန္တီးၿခင္းခံရတယ္
	service provider က thread တစ္ခုကို thread pull ကေန ဆြဲထုတ္ၿပီး job တစ္ခုမွာ assign ခ်လိုက္တယ္
	
	အလုပ္ၿပီးေၿမာက္ၿပီးတဲ့ေနာက္မွာေတာ့ thread pool ထဲကို threads ေတြထပ္ၿပီး ပါ၀င္လာတယ္
	
	Thread Pool ရဲ႕ေကာင္းက်ိဳးမ်ား
		Better Performance - အခ်ိန္ကုန္ သက္သာေစတယ္ ဘာလို႔လဲဆိုေတာ့ thread အသစ္ေတြကို ဖန္တီးစရာမလိုတဲ့အတြက္ေၾကာင့္ၿဖစ္တယ္
		
	တကယ္တန္းအသံုးၿပဳပံု	
		သူတို႔ကို Servlet  တို႔  JSP တို႔မွာသံုးတယ္
***********************************************************************************************************************
Thread Group
	java က single object တစ္ခုတည္းမွာ multiple threads မ်ားကို group ဖြဲ႕ဖို႔ရန္ အဆင္ေၿပမယ့္ နည္းလမ္းတစ္ခုေပးထားတယ္
	အဲ့နည္းလမ္းမွာဆိုရင္ method တစ္ခုတည္းနဲ႔ group of threads မ်ားကို suspend, resume or interrupt လုပ္ေဆာင္ႏိုင္တယ္
	
	Java thread group က java.lang.ThreadGroup class ကို implemented လုပ္ထားတယ္ 	
	ThreadGroup တစ္ခုဆိုတာက set of threads တစ္ခုကို ကိုယ္စားၿပဳတယ္
	ThreadGroup တစ္ခုဟာ တစ္ၿခား ThreadGroup တစ္ခုထဲမွာလည္း ပါ၀င္ႏိုင္တယ္
	ThreadGroup တစ္ခုဟာ tree တစ္ခုကို ဖန္တီးႏိုင္ၿပီးေတာ့ အဲ့ထဲမွာ initial thread group ကလြဲလို႔ တစ္ၿခား thread group ေတြကေတာ့ parent ေတြကိုယ္စီရွိၾကတယ္
	thread ေတြက သူ႕ကိုယ္ပိုင္ own thread group ဆီကပဲ information ေတြကို access လုပ္လို႔ရမယ္ တစ္ၿခား thread group ဒါမွမဟုတ္ parent thread group ေတြဆီကေတာ့
	access လုပ္လို႔ရမွာ မဟုတ္ဘူး
	
	Constructors of ThreadGroup class
		constructor ႏွစ္ခုပဲ ရွိပါတယ္
		method ေတြကေတာ့ အမ်ားၾကီးရွိတယ္
		
	ThreadGroup tg1 = new ThreadGroup("Group A");   
	Thread t1 = new Thread(tg1,new MyRunnable(),"one");     
	Thread t2 = new Thread(tg1,new MyRunnable(),"two");     
	Thread t3 = new Thread(tg1,new MyRunnable(),"three");  
	
	ဒီမွာဆိုရင္ thread သံုးခုကို thread group တစ္ခုတည္းမွာ ထည့္ထားတယ္
	tg1 ဆိုတာက thread group name ၿဖစ္ၿပီးေတာ့ MyRunnable ဆိုတာက Runnable interface ကို implements လုပ္ထားတဲ့ class တစ္ခုၿဖစ္တယ္
	one two three ဆိုတာက thread name ေတြၿဖစ္ၾကတယ္
	
	အဲ့ thread အားလံုးကို code တစ္ေၾကာင္းထဲနဲ႔ interrupt လုပ္လိုက္လို႔ရတယ္
	
	Thread.currentThread().getThreadGroup().interrupt();  
***********************************************************************************************************
Shutdown Hook
	Shutdown Hook ကို resource ကို clean လုပ္ဖို႔ေသာ္လည္းေကာင္း jvm shutdown က်သြားခဲ့သည္ရွိေသာ္ state ကို save လုပ္ဖို႔အတြက္ေသာ္လည္းေကာင္းသံုးတယ္
	clean resource လုပ္ေဆာင္ခ်က္ဆိုတာက log file မ်ားကို ပိတ္ၿခင္း sending some alerts မ်ားလည္း ပါ၀င္ပါတယ္
	အဲ့တာေၾကာင့္ Jvm shutdown မက်ခင္မွာ တစ္ခ်ိဳ႕ေသာ code မ်ားကို execute လုပ္ခ်င္တယ္ဆိုရင္ shutdown hook ကို အသံုးၿပဳလို႔ ရႏိုင္တယ္
	
	JVM က ဘယ္အခ်ိန္မွာ shut down က်ႏိုင္သလဲ
		1.user က common prompt မွာ ctrl+c ႏွိပ္လိုက္ေသာအခါ
		2.System.exit(int) method ကို သြားေခၚမိေသာအခါ
		3.user logoff လုပ္သြားေသာအခါ
		4.user က shutdown ခ်မိသြားေသာအခါ
		
	The addShutdownHook(Thread hook) method
	Runtime class ရဲ႕ addShutdownHook() method ကို  Virtual Machine နဲ႔ thread ကို register လုပ္ရန္အသံုးၿပဳပါတယ္
		public void addShutdownHook(Thread hook){}  
		
	 static factory method getRuntime() ကို call ၿခင္းက  Runtime class ရဲ႕ object ကို ပါ၀င္ေစႏိုင္တယ္
	 Runtime r = Runtime.getRuntime();
	 
	 Factory method
	 	class တစ္ခုရဲ႕ instance ကို return ၿပန္လာမယ္ဆိုရင္ factory method လို႔ေခၚတယ္
	 	
	 runtime class ရဲ႕ halt(int) method ကို call ၿခင္းက shutdown sequence ကို ရပ္တန္႔ေစႏိုင္တယ္
*****************************************************************************************************************************	 
How to perform single task by multiple threads?
	တကယ္လို႔ task တစ္ခုကို threads အမ်ားၾကီးနဲ႔ လုပ္ေဆာင္ေနရတယ္ဆိုရင္ run method တစ္ခုတည္းနဲ႔ တစ္ခါတည္း run ခ်လိုက္လို႔ရတယ္
		
	multitasking in multithreading
		အဲ့လိုသာဆိုရင္ run method အမ်ားၾကီး ေရးရလိမ့္မယ္
********************************************************************************************************************************
 Garbage Collection
 	garbage ဆိုတာက unreferenced objects မ်ားကို ဆိုလိုသည္
 	 runtime unused memory ကို အလိုအေလ်ာက္ၿပန္လည္ ရယူၿခင္းၿဖစ္တယ္ ေနာက္တစ္မ်ိဳးေၿပာရရင္ အသံုးမၿပဳေသာ objects မ်ားကို ဖ်က္ဆီးၿခင္းလည္းၿဖစ္တယ္
 	 အဲ့တာေၾကာင့္ java က ပိုေကာင္းတဲ့ memory management ကိုေပးထားတယ္လို႔ ေၿပာလို႔ရတယ္
 	 
 Advantage of Garbage Collection
 	memory ကို သက္သာေစတယ္ ဘာလို႔လဲဆိုေတာ့ garbage collector က unreferenced objects မ်ားကို heap memory ကေန ဖယ္ရွားေပးတယ္
 	garbage collector က auto အလုပ္လုပ္တယ္ ဘာလို႔လဲဆိုေတာ့ သူက JVM ရဲ႕ အစိတ္အပိုင္းၿဖစ္တဲ့အတြက္ေၾကာင့္ၿဖစ္တယ္
 	
object ကို unreferenced ၿဖစ္ေအာင္ ဘယ္လိုလုပ္မလဲ
	1.By nulling a reference:
		Employee e=new Employee();  
		e=null;  
		
	2. By assigning a reference to another:
		Employee e1=new Employee();  
		Employee e2=new Employee();  
		e1=e2;
		
	3.By anonymous object:
		new Employee();  
		
finalize() method
	object မ်ားကို garbage collected မလုပ္ခင္မွာ finalize() method ကို အရင္ေခၚရတယ္ 
	အဲ့ method က processing ကို clean လုပ္ေပးတဲ့ method တစ္ခုၿဖစ္တယ္
	protected void finalize(){}  
	
	JVM ရဲ႕ Garbage collector က new keywords ပါတဲ့ method မ်ားကိုသာ collect လုပ္တယ္
	အဲ့တာေၾကာင့္ new keyword သာ မပါခဲ့ဘူး ၿပီးေတာ့ finalize method ကိုလည္းသံုးခဲ့မယ္ဆိုရင္ အဲ့ method က တစ္ၿခားက်န္တဲ့ objects  မ်ားကို destroy လုပ္သြားလိမ့္မယ္
	
	
	gc() method
		ဒီ method ကို processing cleanup ၿပဳလုပ္ရန္သံုးပါတယ္
		ဒီ method ကို System and Runtime classes မ်ားတြင္ ေတြ႕ႏိုင္တယ္
		public static void gc(){}  
		
	 daemon thread က Garbage collection ကို လုပ္ေဆာင္တယ္ အဲ့တာကို Garbage Collector(GC) လို႔ေခၚတယ္
	 This thread ကို  finalize() method လို႔ေခၚတယ္ object ေတြကို garbage collected မလုပ္ခင္မွာ 
*******************************************************************************************************************************
Runtime class
	Runtime class ကို java runtime environment နဲ႔ အၿပန္အလွန္ အက်ိဳးသက္ေရာက္ရန္ အသံုးၿပဳတယ္
	Java Runtime class ကဆိုလို႔ရွိရင္ process တစ္ခုကို execute လုပ္ရန္ gc ကို ေခၚရန္ total and free memory မ်ားကို ရယူရန္ methods မ်ားကို ေပးပါတယ္
	java application တစ္ခုအတြက္ java.lang.Runtime class ရဲ႕ instance တစ္ခုတည္းသာလွ်င္ available ၿဖစ္တယ္
	Runtime.getRuntime() method က Runtime class ရဲ႕ singleton instance ကို return ၿပန္ေပးပါတယ္
	
	Runtime class ရဲ႕ အေရးၾကီးေသာ method မ်ားကို တစ္ခုခ်င္းေရးၿပသြားမယ္
	1. Runtime exec() method
		public class Runtime1{  
 			public static void main(String args[])throws Exception{  
		 			 Runtime.getRuntime().exec("notepad");//notepad အသစ္တစ္ခုပြင့္လာလိမ့္မယ္
			 }  
		} 
 	
 	 	windows ရဲ႕ shutdown ကို အလုပ္လုပ္ခိုင္းမယ္ java ကေနတစ္ဆင့္
 	 		public class Runtime2{  
				 public static void main(String args[])throws Exception{  
				  Runtime.getRuntime().exec("c:\\Windows\\System32\\shutdown -s -t 0");  
				 }  
			} 
	
		restart ခ်ခ်ရင္ 
			public class Runtime3{  
				 public static void main(String args[])throws Exception{  
				  Runtime.getRuntime().exec("shutdown -r -t 0");  
				 }  
				}  
				
		Runtime availableProcessors()		
		public class Runtime4{  
			 public static void main(String args[])throws Exception{  
			  System.out.println(Runtime.getRuntime().availableProcessors());  
			 }  
			} 
****************************************************************************************************************************
Synchronization
	 synchronication ဆိုတာက 